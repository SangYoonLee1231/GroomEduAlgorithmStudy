#include<cstdio>
#include<cmath>
#include<climits>
#include<iostream>
using namespace std;

class Point2D
{
private: 
	int x;
	int y;

public:
	Point2D(int x = 0, int y = 0)
	{
		this->x = x;
		this->y = y;
	}

	/**
	* 2차원 평면 상에서 점 this부터 점 target까지 거리의 제곱을 계산하는 함수
	* @param target
	* @return
	*/
	int getSquaredDistanceTo(const Point2D &target) const
	{
		int dx = abs(this->x - target.x);
		int dy = abs(this->y - target.y);
		return dx*dx + dy*dy;
	}

	double getDistanceTo(const Point2D &target) const{
		double sqd = (double)this->getSquaredDistanceTo(target);
		return sqrt(sqd);
	}
};


int main()
{
	int n;
	Point2D* points;

	scanf("%d", &n);
	points = new Point2D[n];

	for (int i = 0; i < n; i++)
	{
		int x, y;
		scanf("%d %d", &x, &y);

		points[i] = Point2D(x, y);
	}
	
	int cnt = 0;
	double distance = 0.0;
	double min_distance = 0.0;
	
	min_distance = distance = points[0].getDistanceTo(points[1]);
		
	for (int i = 0; i < n-1; i++)
	{
		for (int j = i+1; j < n; j++)
		{
			distance = points[i].getDistanceTo(points[j]);
			if (distance < min_distance)
			{
				min_distance = distance;
				cnt = 1;
			}
			else if (distance == min_distance)
				cnt++;
		}
	}
	
	//int temp = (min_distance) * 10.0 + 0.5;
	
	//printf("%temp * 0.1 
	printf("%.1f\n", min_distance);
	cout << cnt << endl;

	delete[] points;
	return 0;
}
